// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  create_at  DateTime   @default(now())
  updated_at DateTime   @default(now())
  Task       Task[]
  Category   Category[]
  Comments   Comment[]

  @@map("users")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String
  status      String // 'pendente', 'em andamento', 'concluída'
  priority    String // 'baixa', 'média', 'alta'
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  Comments Comment[]

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  category_id String
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Category {
  id   String @id @default(uuid())
  name String

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  tasks Task[]

  @@map("categories")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  task_id String
  task    Task   @relation(fields: [task_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@map("comments")

}
